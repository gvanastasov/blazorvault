@page "/components"
<BVHeading Large>Components</BVHeading>
<BVText>Blazor Vault is rich package of reusable components, based on the fairly new tehcnology from the Microsoft development stack - Blazor, as well as a old timer - the popular theming and functionality library - Bootstrap. You can use the provided components to quickly scaffold frontend solution, or extend the existing functionality.</BVText>
<hr>
<section class="mb-5">
    <BVHeading Level="2" As="4">Install</BVHeading>
    <BVText>The following instructions will set you up for a quick plug and play bootstrap of your object</BVText>
    <BVHeading Level="3" As="6">NuGet:</BVHeading>
    <ol>
        <li>Install the nuget from <a href="https://www.nuget.org/packages/BlazorVault/">NuGet.org</a>.</li>
        <li>
            <p>Include the library namespace (either inside your root _Imports.razor) or where you decide.</p>
            <BVListGroup>
                <BVListGroupItem><span class="text-primary">_Imports.razor</span></BVListGroupItem>
                <BVListGroupItem>
                    <BVCode>@@using ...
@@using BlazorVault
...</BVCode>
                </BVListGroupItem>
            </BVListGroup>
        </li>
    </ol>
    <BVHeading Level="3" As="6">Manual:</BVHeading>
    <ol>
        <li>Donwload the source from <a href="https://github.com/gvanastasov/blazorvault">Github</a>.</li>
        <li>Copy the project somewhere inside your solution folder.</li>
        <li>Include a reference to the newly created copy.</li>
        <li>Include the library namespace (either inside your root _Imports.razor) as described above.</li>
    </ol>
    <BVText>For conveniance reasons, all public definitions are uncluded under the same namespace BlazorVault, but in the future the components might be split under different projects and namespaces, in order to improve reusability and scalability. You are also welcome to use inline namespaces, although that would lead to repetitive code.</BVText>
</section>
<hr>
<section>
    <BVHeading Level="2" As="4">Base</BVHeading>
    <BVText>The library contains a number of reusable components, all based on some common properties. Those are infered from the general behaviour of the expected render output. The following base classes are used to build (almost) all components:</BVText>
    @* TODO: create a hierarchy component *@
    <ul>
        <li>BVComponentBase - merges HTML5 attributes and renders a tag.</li>
        <li>BVContentComponent - extends BVComponentBase and allows rendering of markup between open and end tags.</li>
        <li>BVDynamic - extends BVContentComponent as it allows dynamic/conditional/runtime tag rendering.</li>
        <li>BVStyleComponent - extends BVContentComponent, but allows different styling/variation of the component to be specified.</li>
    </ul>
    <BVText>The above are not available in the common namespace - BlazorVault - if you want to use them you have to include <span>@@using BlazorVault.Components</span>. That is simply due to the fact, that these components don't have a direct output, or in other words they are abstract. Refer to they code summaries for further information.</BVText>
    <BVText>Most components (targeting all) are written via 'code behind' approach. That means there is no extra code being generated by the framework and the library should stay as small as possible in termes of size optimization. Some of the more complex components are still written in .razor format, but that will slowly be changed.</BVText>
</section>
<hr />
<section>
    <BVHeading Level="2" As="4">Debug</BVHeading>
    <BVText>The base component contains <span class="documentation-text--primary">Debug</span> flag property. Set this to true to enable debug options per component.</BVText>
</section>
<hr />
<section>
    <BVHeading Level="2" As="4">Future Work</BVHeading>
    <BVText>Hopefully the packages scales enough - that really dependes on availability and contribution at later stages. Make sure you check the task list (TODO/UNDONE/HACK) in your prefered IDE, otherwise heres a list of primary topics needed:</BVText>
    <ul>
        <li><span class="documentation-text--primary">AnimationStateMachine.cs</span> - need to provide robust and understandable way of animating things around.</li>
        <li><span class="documentation-text--primary">Animations</span> - some components a missing animation entirely.</li>
        <li><span class="documentation-text--primary">Functionality</span> - some components a missing some of their common expected behaviours.</li>
        <li><span class="documentation-text--primary">Code</span> - rendering code via component right now is done manually via 'pre-escaped' html render. This will be changed as soon as I have time to implement something (thoughts are in favor of prism.js type of behaviour or something similar.</li>
        <li><span class="documentation-text--primary">Documentation</span> - major portion is still missing. End goal is to have the meta data for every component rendered via reflection (or summary xml generated files, decision is still pending).</li>
    </ul>
    <BVText></BVText>
</section>
<hr />
<section class="mb-5">
    <BVHeading Level="2" As="4">Documentation</BVHeading>
    <BVText>A detailed documentation of how-to and what-to use can be found both on this website, as well as README.md files in every components physical location. A more simple and consistant description is also provided as summary to the code. Those are subject to change post every release, whereas changelog will also be provided inhere as well. Once the structure of the project is cleared out, the breaking changes will be put down to minimum (i.e. post beta release).</BVText>
</section>
<hr>
<section class="mb-5">
    <BVHeading Level="2" As="4">Contributing</BVHeading>
    <BVText>Contributions are always much appreciated and one can do so, by helping out the development of this project. Feel free to do so at the projects open source page hosted at <a href="https://github.com/gvanastasov/blazorvault">Github</a>. Follow the proposed contribution guidelines and I would try to activelly respond and update the repository, whenever I can.</BVText>
</section>
<hr>
<section>
    <BVHeading Level="2" As="4">Author</BVHeading>
    <BVText>This package was developed and published by me (Georgi Anastasov), in an independant and self driven initiative. Due to the nature of the project, ie. open source distribution, crediting the author is not required, but if you would like to drop a line or two - feel free to do so and it would be highly appreciated. You can check some other interesting things around my personal website <a href="https://codereactory.com">CodeReactory</a>.</BVText>
</section>
@code {
    [CascadingParameter(Name = "layout")]
    public MainLayout Layout { get; set; }

    protected override void OnInitialized()
    {
        Layout.Update(
            x =>
            {
                x.GatesHidden = true;
            });
    }
}